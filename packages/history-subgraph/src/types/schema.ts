// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class UserRequest extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id !== null, 'Cannot save UserRequest entity without an ID');
    assert(
      id.kind == ValueKind.STRING,
      'Cannot save UserRequest entity with non-string ID. ' +
        'Considering using .toHex() to convert the "id" to a string.',
    );
    store.set('UserRequest', id.toString(), this);
  }

  static load(id: string): UserRequest | null {
    return store.get('UserRequest', id) as UserRequest | null;
  }

  get id(): string {
    let value = this.get('id');
    return value.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get('txHash');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset('txHash');
    } else {
      this.set('txHash', Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get('timestamp');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset('timestamp');
    } else {
      this.set('timestamp', Value.fromBigInt(value as BigInt));
    }
  }

  get token(): Bytes | null {
    let value = this.get('token');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset('token');
    } else {
      this.set('token', Value.fromBytes(value as Bytes));
    }
  }

  get nativeToken(): Bytes | null {
    let value = this.get('nativeToken');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nativeToken(value: Bytes | null) {
    if (value === null) {
      this.unset('nativeToken');
    } else {
      this.set('nativeToken', Value.fromBytes(value as Bytes));
    }
  }

  get sender(): Bytes | null {
    let value = this.get('sender');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset('sender');
    } else {
      this.set('sender', Value.fromBytes(value as Bytes));
    }
  }

  get tokenIds(): Array<BigInt> | null {
    let value = this.get('tokenIds');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset('tokenIds');
    } else {
      this.set('tokenIds', Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get tokenUris(): Array<string> | null {
    let value = this.get('tokenUris');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenUris(value: Array<string> | null) {
    if (value === null) {
      this.unset('tokenUris');
    } else {
      this.set('tokenUris', Value.fromStringArray(value as Array<string>));
    }
  }

  get values(): Array<BigInt> | null {
    let value = this.get('values');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset('values');
    } else {
      this.set('values', Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get messageId(): Bytes | null {
    let value = this.get('messageId');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set messageId(value: Bytes | null) {
    if (value === null) {
      this.unset('messageId');
    } else {
      this.set('messageId', Value.fromBytes(value as Bytes));
    }
  }

  get encodedData(): Bytes | null {
    let value = this.get('encodedData');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set encodedData(value: Bytes | null) {
    if (value === null) {
      this.unset('encodedData');
    } else {
      this.set('encodedData', Value.fromBytes(value as Bytes));
    }
  }

  get message(): string | null {
    let value = this.get('message');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set message(value: string | null) {
    if (value === null) {
      this.unset('message');
    } else {
      this.set('message', Value.fromString(value as string));
    }
  }

  get recipient(): Bytes | null {
    let value = this.get('recipient');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes | null) {
    if (value === null) {
      this.unset('recipient');
    } else {
      this.set('recipient', Value.fromBytes(value as Bytes));
    }
  }
}

export class Execution extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id !== null, 'Cannot save Execution entity without an ID');
    assert(
      id.kind == ValueKind.STRING,
      'Cannot save Execution entity with non-string ID. ' +
        'Considering using .toHex() to convert the "id" to a string.',
    );
    store.set('Execution', id.toString(), this);
  }

  static load(id: string): Execution | null {
    return store.get('Execution', id) as Execution | null;
  }

  get id(): string {
    let value = this.get('id');
    return value.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get('token');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset('token');
    } else {
      this.set('token', Value.fromBytes(value as Bytes));
    }
  }

  get tokenIds(): Array<BigInt> | null {
    let value = this.get('tokenIds');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset('tokenIds');
    } else {
      this.set('tokenIds', Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get values(): Array<BigInt> | null {
    let value = this.get('values');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset('values');
    } else {
      this.set('values', Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get amount(): BigInt | null {
    let value = this.get('amount');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset('amount');
    } else {
      this.set('amount', Value.fromBigInt(value as BigInt));
    }
  }

  get sender(): Bytes | null {
    let value = this.get('sender');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset('sender');
    } else {
      this.set('sender', Value.fromBytes(value as Bytes));
    }
  }

  get recipient(): Bytes | null {
    let value = this.get('recipient');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes | null) {
    if (value === null) {
      this.unset('recipient');
    } else {
      this.set('recipient', Value.fromBytes(value as Bytes));
    }
  }

  get messageId(): Bytes | null {
    let value = this.get('messageId');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set messageId(value: Bytes | null) {
    if (value === null) {
      this.unset('messageId');
    } else {
      this.set('messageId', Value.fromBytes(value as Bytes));
    }
  }

  get status(): boolean {
    let value = this.get('status');
    return value.toBoolean();
  }

  set status(value: boolean) {
    this.set('status', Value.fromBoolean(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get('timestamp');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset('timestamp');
    } else {
      this.set('timestamp', Value.fromBigInt(value as BigInt));
    }
  }

  get txHash(): Bytes | null {
    let value = this.get('txHash');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset('txHash');
    } else {
      this.set('txHash', Value.fromBytes(value as Bytes));
    }
  }
}

export class Message extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id !== null, 'Cannot save Message entity without an ID');
    assert(
      id.kind == ValueKind.STRING,
      'Cannot save Message entity with non-string ID. ' +
        'Considering using .toHex() to convert the "id" to a string.',
    );
    store.set('Message', id.toString(), this);
  }

  static load(id: string): Message | null {
    return store.get('Message', id) as Message | null;
  }

  get id(): string {
    let value = this.get('id');
    return value.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get msgId(): Bytes | null {
    let value = this.get('msgId');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set msgId(value: Bytes | null) {
    if (value === null) {
      this.unset('msgId');
    } else {
      this.set('msgId', Value.fromBytes(value as Bytes));
    }
  }

  get txHash(): Bytes | null {
    let value = this.get('txHash');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset('txHash');
    } else {
      this.set('txHash', Value.fromBytes(value as Bytes));
    }
  }

  get msgHash(): Bytes | null {
    let value = this.get('msgHash');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set msgHash(value: Bytes | null) {
    if (value === null) {
      this.unset('msgHash');
    } else {
      this.set('msgHash', Value.fromBytes(value as Bytes));
    }
  }

  get msgData(): Bytes | null {
    let value = this.get('msgData');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set msgData(value: Bytes | null) {
    if (value === null) {
      this.unset('msgData');
    } else {
      this.set('msgData', Value.fromBytes(value as Bytes));
    }
  }

  get signatures(): Array<Bytes> | null {
    let value = this.get('signatures');
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set signatures(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset('signatures');
    } else {
      this.set('signatures', Value.fromBytesArray(value as Array<Bytes>));
    }
  }
}
